#!/usr/bin/python3
import getpass
import gi
import subprocess
import os
import set
import count

try:
    gir_install = subprocess.check_output("dpkg --get-selections | grep gir1.2-appindicator3-0.1 | awk '{print $2}'", shell=True).decode().strip()
    if gir_install != 'install':
        subprocess.call("sudo apt-get --yes --force-yes install gir1.2-appindicator3-0.1", shell=True)
        print("gir1.2-appindicator3-0.1 미설치 -> 설치")
    else:
        print("gir1.2-appindicator3-0.1 이미 설치됨")
except subprocess.CalledProcessError as e:
    subprocess.call("sudo apt-get --yes --force-yes install gir1.2-appindicator3-0.1", shell=True)
    print("gir1.2-appindicator3-0.1 미설치 -> 설치")

gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
from gi.repository import Gtk
from datetime import date, datetime

class Application(Gtk.Window):

    def __init__(self):
        self.logger("HamoniKR PC Checker Start")

        Gtk.Window.__init__(self, title="HamoniKR PC Checker")
        self.set_border_width(10)
        box_outer = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.add(box_outer)

        stacks = Gtk.Stack()
        stacks.set_hexpand(True)
        stacks.set_vexpand(True)
        stacks.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT_RIGHT)
        stacks.set_transition_duration(1000)

        stack_switcher = Gtk.StackSwitcher()
        stack_switcher.set_stack(stacks)
        box_outer.pack_start(stack_switcher, True, True, 0)
        box_outer.pack_start(stacks, True, True, 0)

        stc_security_status = Gtk.ListBox()
        stc_security_status.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_security_status, "label", "보안 상태")

        stc_pc_info = Gtk.ListBox()
        stc_pc_info.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_pc_info, "label", "시스템 정보")

        stc_security_checklist = Gtk.ListBox()
        stc_security_checklist.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_security_checklist, "label", "점검 항목")

        stc_setting = Gtk.ListBox()
        stc_setting.set_selection_mode(Gtk.SelectionMode.NONE)
        stacks.add_titled(stc_setting, "label", "설정")


        ###### reload ######
        box_refresh = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        btn_ref = Gtk.Button()
        img_ref = Gtk.Image()
        img_ref.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_refresh.png")
        btn_ref.add(img_ref)
        btn_ref.set_tooltip_text("보안 상태를 다시 점검합니다.")
        btn_ref.connect("clicked", self.fnt_set_score)
        box_refresh.pack_end(btn_ref, False, False, 0)

        row = Gtk.ListBoxRow()
        row.add(box_refresh)
        stc_security_status.add(row)

        ###### status ######
        self.lbl_total_status = Gtk.Label()
        box_total_status = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_total_status.pack_start(self.lbl_total_status, True, False, 0)

        row = Gtk.ListBoxRow()
        row.add(box_total_status)
        stc_security_status.add(row)

        ###### info ######
        self.lbl_total_info = Gtk.Label()
        box_total_info = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_total_info.pack_start(self.lbl_total_info, True, False, 0)

        row = Gtk.ListBoxRow()
        row.add(box_total_info)
        stc_security_status.add(row)

        ###### score ######
        self.lbl_total_score = Gtk.Label()
        box_total_score = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_total_score.pack_start(self.lbl_total_score, True, False, 0)

        row = Gtk.ListBoxRow()
        row.add(box_total_score)
        stc_security_status.add(row)

        ###### set_score ######
        self.fnt_set_score(widget=self)


        # os info
        os_name = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        os_ver = self.fnt_command_return_word("lsb_release -r", 'Release:\t', '\n')
        os_info = os_name + " " + os_ver

        # os gui
        lbl_os_name = Gtk.Label()
        lbl_os = Gtk.Label()
        box_os = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_os.pack_start(lbl_os_name, False, False, 0)
        box_os.pack_start(lbl_os, True, False, 0)

        lbl_os_name.set_markup("<span font='13' ><b> 운영체제      </b></span>")
        lbl_os.set_markup("<span>" + os_info + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_os)
        stc_pc_info.add(row)

        # TODO : 다른 DE 사용자도 도움이 되는 정보제공으로 변경 필요.
        if os_name == "HamoniKR":
            # cinnamon info
            cinnamon_ver = self.fnt_command_return_word("cinnamon --version", 'Cinnamon ', '\n')

            # cinnamon gui
            lbl_cinnamon_name = Gtk.Label()
            lbl_cinnamon = Gtk.Label()
            box_cinnamon = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
            box_cinnamon.pack_start(lbl_cinnamon_name, False, False, 0)
            box_cinnamon.pack_start(lbl_cinnamon, True, False, 0)

            lbl_cinnamon_name.set_markup("<span font='13'><b> 시나몬 버전   </b></span>")
            lbl_cinnamon.set_markup("<span>"+cinnamon_ver+"</span>")

            row = Gtk.ListBoxRow()
            row.add(box_cinnamon)
            stc_pc_info.add(row)

        # kernel info
        kernel_ver = self.fnt_command_return_word("uname -r", False, '\n')

        # kernel gui
        lbl_kernel_name = Gtk.Label()
        lbl_kernel = Gtk.Label()
        box_kernel = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_kernel.pack_start(lbl_kernel_name, False, False, 0)
        box_kernel.pack_start(lbl_kernel, True, False, 0)

        lbl_kernel_name.set_markup("<span font='13'><b> 리눅스 커널   </b></span>")
        lbl_kernel.set_markup("<span>" + kernel_ver + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_kernel)
        stc_pc_info.add(row)

        # CPU info
        cpu_name = self.fnt_command_return_word("lscpu | grep 'Model name:'", 'Model name:', '\n')
        cpu_cnt = subprocess.check_output("nproc", shell=True).decode().strip()

        # cpu gui
        lbl_cpu_name = Gtk.Label()
        lbl_cpu = Gtk.Label()
        box_cpu = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_cpu.pack_start(lbl_cpu_name, False, False, 0)
        box_cpu.pack_start(lbl_cpu, True, False, 0)

        lbl_cpu_name.set_markup("<span font='13'><b> 프로세서      </b></span>")
        lbl_cpu.set_markup("<span>" + cpu_name + " X " + cpu_cnt + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_cpu)
        stc_pc_info.add(row)

        # memory info
        memory_name = subprocess.check_output("free -h | grep 'Mem:'", shell=True).decode()
        memory_name = memory_name.split('Mem:')[1].strip().split(' ')[0]

        # memory gui
        lbl_memory_name = Gtk.Label()
        lbl_memory = Gtk.Label()
        box_memory = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_memory.pack_start(lbl_memory_name, False, False, 0)
        box_memory.pack_start(lbl_memory, True, False, 0)

        lbl_memory_name.set_markup("<span font='13'><b> 메모리        </b></span>")
        lbl_memory.set_markup("<span>" + memory_name + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_memory)
        stc_pc_info.add(row)

        # disk info
        disk_val = self.fnt_command_return_word(
            "df -P | grep -v ^Filesystem | awk '{sum += $2} END { print sum/1024/1024 }'", False, '\n')
        disk_val = str(round(float(disk_val), 1))

        # disk gui
        lbl_disk_name = Gtk.Label()
        lbl_disk = Gtk.Label()
        box_disk = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_disk.pack_start(lbl_disk_name, False, False, 0)
        box_disk.pack_start(lbl_disk, True, False, 0)

        lbl_disk_name.set_markup("<span font='13'><b> 하드 드라이브 </b></span>")
        lbl_disk.set_markup("<span>" + disk_val + " GB</span>")

        row = Gtk.ListBoxRow()
        row.add(box_disk)
        stc_pc_info.add(row)

        try:
            pci_install = subprocess.check_output("dpkg --get-selections | grep pciutils | awk '{print $2}'", shell=True).decode().strip()
            if pci_install != 'install' :
                subprocess.call("sudo apt-get --yes --force-yes install pciutils", shell=True)
                print("pciutils 미설치 -> 설치")
            else :
                print("pciutils 이미 설치됨")
        except subprocess.CalledProcessError as e:
           subprocess.call("sudo apt-get --yes --force-yes install pciutils", shell=True)
           print("pciutils 미설치 -> 설치")

        # graphic info
        graphic_val = self.fnt_command_return_word("lspci | grep -i VGA", 'controller: ', '\n')

        # graphic gui
        lbl_graphic_name = Gtk.Label()
        lbl_graphic = Gtk.Label()
        box_graphic = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_graphic.pack_start(lbl_graphic_name, False, False, 0)
        box_graphic.pack_start(lbl_graphic, True, False, 0)

        lbl_graphic_name.set_markup("<span font='13'><b> 그래픽카드    </b></span>")
        lbl_graphic.set_markup("<span>" + graphic_val + "</span>")

        row = Gtk.ListBoxRow()
        row.add(box_graphic)
        stc_pc_info.add(row)

        # # uuid info
        uuid_val = self.fnt_command_return_word("sudo blkid | grep UUID", 'UUID="', '"')

        # uuid gui
        lbl_uuid_name = Gtk.Label()
        lbl_uuid = Gtk.Label()
        box_uuid = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_uuid.pack_start(lbl_uuid_name, False, False, 0)
        box_uuid.pack_start(lbl_uuid, True, False, 0)

        lbl_uuid_name.set_markup("<span font='13'><b> 단말 제품 번호</b></span>")
        lbl_uuid.set_markup("<span>"+uuid_val+"</span>")

        row = Gtk.ListBoxRow()
        row.add(box_uuid)
        stc_pc_info.add(row)

        ###### password ######
        row = Gtk.ListBoxRow()
        lbl_pw_name = Gtk.Label()
        self.lbl_pw_status = Gtk.Label()
        self.lbl_pw_info = Gtk.Label()

        (pw_status, pw_past) = set.set_password()

        lbl_pw_name.set_markup("<b>비밀번호  </b>")
        self.lbl_pw_status.set_markup(pw_status)
        self.lbl_pw_info.set_markup(pw_past)

        box_pw = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_pw.pack_start(self.lbl_pw_status, False, False, 0)
        box_pw.pack_start(lbl_pw_name, False, False, 15)
        box_pw.pack_start(self.lbl_pw_info, True, True, 0)

        btn_pw = Gtk.Button()
        img_set1 = Gtk.Image()
        img_set1.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_pw.add(img_set1)
        btn_pw.connect("clicked", self.fnt_open_user)
        btn_pw.connect("released",self.fnt_close_user)
        box_pw.pack_start(btn_pw, False, False, 0)

        row.add(box_pw)
        stc_security_checklist.add(row)

        ###### update ######
        row = Gtk.ListBoxRow()
        lbl_update_name = Gtk.Label()
        self.lbl_update_status = Gtk.Label()
        self.lbl_update_info = Gtk.Label()

        (update_status, update_info) = set.set_update()

        lbl_update_name.set_markup("<b>업그레이드</b>")
        self.lbl_update_status.set_markup(update_status)
        self.lbl_update_info.set_markup(update_info)

        btn_fupdate = Gtk.Button()
        img_up = Gtk.Image()
        img_up.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_upgrade.png")
        btn_fupdate.add(img_up)
        btn_fupdate.set_tooltip_text("현재 업그레이드 가능한 패키지를 자동으로 업그레이드합니다.")
        btn_fupdate.connect("clicked", self.fnt_fupdate)
        btn_fupdate.connect("pressed",self.fnt_fupdate_pressed)

        btn_update = Gtk.Button()
        img_set2 = Gtk.Image()
        img_set2.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_update.add(img_set2)
        btn_update.connect("clicked", self.fnt_open_updatemanager)
        btn_update.connect("released", self.fnt_close_updatemanager)

        box_update = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_update.pack_start(self.lbl_update_status, False, False, 0)
        box_update.pack_start(lbl_update_name, False, False, 15)
        box_update.pack_start(self.lbl_update_info, True, True, 0)
        box_update.pack_start(btn_fupdate, False, False, 0)
        box_update.pack_start(btn_update, False, False, 0)

        row.add(box_update)
        stc_security_checklist.add(row)

        ###### ufw ######
        row = Gtk.ListBoxRow()
        lbl_ufw_name = Gtk.Label()
        self.lbl_ufw_info = Gtk.Label()
        self.lbl_ufw_status = Gtk.Label()
        self.switch_ufw = Gtk.Switch()

        (self.lbl_ufw_status, self.lbl_ufw_info, self.switch_ufw, ufw_status, ufw_info) = set.set_ufw()

        lbl_ufw_name.set_markup("<b>방화벽    </b>")
        box_ufw = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_ufw.pack_start(self.lbl_ufw_status, False, False, 0)
        box_ufw.pack_start(lbl_ufw_name, False, False, 15)
        box_ufw.pack_start(self.lbl_ufw_info, True, True, 0)

        self.switch_ufw.connect("notify::active", self.fnt_ufw_toggled)
        self.switch_ufw.set_tooltip_text("방화벽 상태를 즉시 변경합니다.")
        box_ufw.pack_start(self.switch_ufw, False, False, 0)

        btn_ufw = Gtk.Button()
        img_set3 = Gtk.Image()
        img_set3.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_ufw.add(img_set3)
        btn_ufw.connect("clicked", self.fnt_open_ufw)
        btn_ufw.connect("released", self.fnt_close_ufw)
        box_ufw.pack_start(btn_ufw, False, False, 0)

        row.add(box_ufw)
        stc_security_checklist.add(row)

        ###### backup ######
        row = Gtk.ListBoxRow()
        lbl_ts_name = Gtk.Label()
        self.lbl_ts_status = Gtk.Label()
        self.lbl_ts_info = Gtk.Label()

        btn_ts = Gtk.Button()
        img_set4 = Gtk.Image()
        img_set4.set_from_file("/usr/share/icons/hicolor/256x256/apps/pc_icon.png")
        btn_ts.add(img_set4)
        btn_ts.connect("clicked", self.fnt_open_timeshift)
        btn_ts.connect("released", self.fnt_close_timeshift)

        (self.lbl_ts_status, self.lbl_ts_info, ts_status, ts_info) = set.set_backup()

        lbl_ts_name.set_markup("<b>백업      </b>")
        box_ts = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL)
        box_ts.pack_start(self.lbl_ts_status, False, False, 0)
        box_ts.pack_start(lbl_ts_name, False, False, 15)
        box_ts.pack_start(self.lbl_ts_info, True, True, 0)
        box_ts.pack_start(btn_ts, False, False, 0)

        row.add(box_ts)
        stc_security_checklist.add(row)


        ######설정######

        ##알람 기능##
        self.lbl_alarm_info = Gtk.Label()
        lbl_alarm = Gtk.Label()
        lbl_alarm.set_markup("<span font='13'><b> 알람 기능 </b></span>")

        (self.lbl_alarm_info, switch_alarm, alarm_info) = set.set_alarm()
        switch_alarm.connect("notify::active", self.fnt_alarm_toggled)

        box_alarm = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=5)
        box_alarm.pack_start(lbl_alarm, False, False, 0)
        box_alarm.pack_start(self.lbl_alarm_info, True, False, 0)
        box_alarm.pack_start(switch_alarm, True, True, 0)

        row = Gtk.ListBoxRow()
        row.add(box_alarm)
        stc_setting.add(row)

    def fnt_set_score(self, widget):
        (total_score_text, total_status_text, total_info_text) = count.set_score()
        self.lbl_total_info.set_markup(total_info_text)
        self.lbl_total_score.set_markup(total_score_text)
        self.lbl_total_status.set_markup(total_status_text)

    def fnt_command_return_word(self, command, split1, split2):
        if False == split1:
            result = subprocess.check_output(command, shell=True).decode().split(split2)[0]
        elif False == split2:
            result = subprocess.check_output(command, shell=True).decode().split(split1)[1]
        else:
            result = subprocess.check_output(command, shell=True).decode().split(split1)[1].split(split2)[0]
        return result.strip()

    def fnt_open_user(self, widget):
        self.logger("Open user - pw")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        if osname == "HamoniKR":
            subprocess.call('su - $PCCHECKER_USER -c "cinnamon-settings user"', shell=True)
        else :
            subprocess.call('XDG_CURRENT_DESKTOP=GNOME gnome-control-center user-accounts', shell=True)
    def fnt_close_user(self,widget):
        self.logger("Close user - pw")
        (pw_status, pw_past) = set.set_password()
        self.lbl_pw_status.set_markup(pw_status)
        self.lbl_pw_info.set_markup(pw_past)

    def fnt_open_updatemanager(self, widget):
        self.logger("Open update manager")
        osname = self.fnt_command_return_word("lsb_release -i", 'ID:\t', '\n')
        if osname == "HamoniKR":
            subprocess.call('mintupdate', shell=True)
        elif osname == "Gooroom":
            subprocess.call('gooroom-update-launcher', shell=True)
        elif osname == "Tmaxos":
            subprocess.call('XDG_CURRENT_DESKTOP=GNOME gnome-control-center info-overview', shell=True)
    def fnt_close_updatemanager(self, widget):
        self.logger("Close update manager")
        (update_status, update_info) = set.set_update()
        self.lbl_update_status.set_markup(update_status)
        self.lbl_update_info.set_markup(update_info)

    def fnt_fupdate(self, widget):
        self.logger("System upgrade")
        subprocess.call('sudo apt-get --yes update && sudo apt-get --yes upgrade', shell=True)
        (update_status, update_info) = set.set_update()
        self.lbl_update_status.set_markup(update_status)
        self.lbl_update_info.set_markup(update_info)
    def fnt_fupdate_pressed(self,widget):
        self.lbl_update_info.set_markup("업데이트 진행 중입니다. 잠시만 기다려주세요.")

    def fnt_open_ufw(self, widget):
        self.logger("Open ufw")
        subprocess.call('sudo gufw', shell=True)
    def fnt_close_ufw(self, widget):
        self.logger("Close ufw")
        (lbl_ufw_status,lbl_ufw_info, switch_ufw, ufw_status, ufw_info) = set.set_ufw()
        self.lbl_ufw_status.set_markup(ufw_status)
        self.lbl_ufw_info.set_markup(ufw_info)
        self.switch_ufw.set_active(switch_ufw.get_active())

    def fnt_ufw_toggled(self, switch_ufw, state):
        self.logger("Switch ufw")
        if switch_ufw.get_active():
            subprocess.call("sudo ufw enable", shell=True)
        else:
            subprocess.call("sudo ufw disable", shell=True)
        (lbl_ufw_status, lbl_ufw_info, switch_ufw, ufw_status, ufw_info) = set.set_ufw()
        self.lbl_ufw_status.set_markup(ufw_status)
        self.lbl_ufw_info.set_markup(ufw_info)

    def fnt_alarm_toggled(self, alarm_switch, state):
        self.logger("Switch alarm")
        if alarm_switch.get_active():
            subprocess.call("systemctl daemon-reload", shell=True)
            subprocess.call("systemctl restart pcchecker_alarm.timer", shell=True)
        else:
            subprocess.call("systemctl stop pcchecker_alarm.timer", shell=True)
        (lbl_alarm_info, switch_alarm, alarm_info) = set.set_alarm()
        self.lbl_alarm_info.set_markup(alarm_info)

    def fnt_open_timeshift(self, widget):
        self.logger("Open timeshft")
        subprocess.call('sudo timeshift-gtk', shell=True)
    def fnt_close_timeshift(self,widget):
        self.logger("Close timeshft")
        (lbl_ts_status, lbl_ts_info, ts_status, ts_info) = set.set_backup()
        self.lbl_ts_status.set_markup(ts_status)
        self.lbl_ts_info.set_markup(ts_info)

    def logger(self, message):
        today = date.today().strftime('%Y%m%d')
        time = datetime.now().strftime('%H:%M:%S')
        dir_path = "/var/log/pcchecker"
        file_name = "logger-" + today + ".log"

        if not os.path.isdir(dir_path):
            os.makedirs(dir_path)

        f = open(dir_path + "/" + file_name, mode='at', encoding='utf-8')
        f.write("[" + time + "] " + message + "\n")
        f.close()

    def run(self):
        self.set_default_size(600,250)
        self.connect("destroy", Gtk.main_quit)
        self.show_all()
        Gtk.main()


if 'root' != getpass.getuser():
    subprocess.call(
        'zenity --error --no-wrap --height=150 --width=250 --title "실행권한 오류" --text="관리자 권한으로 실행해 주시기 바랍니다."',
        shell=True)
else:
    Application().run()
